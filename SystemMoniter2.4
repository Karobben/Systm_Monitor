#!/usr/local/bin/python3.7
#time
'''
for  CPU tm model
Ubunt
sudo apt-get install lm-sensors
sudo sensors-detect
sudo service kmod start

'''
import os, time
from bs4 import BeautifulSoup
from urllib.request import urlopen
import pyfiglet
from pyparsing import *


'''
Pikachu
'''

Pikc_base={"1"   : "     $$         $  \n    $/$        $l$ \n    $l$       $lll$\n   $ll$    $$$llll$\n   $ll$  $$//$lll$ \n  $llll$$ll/$lll$  \n $lllllllll$$ll$   \n$Clllllllll$llll$  \n$$lllllllll$ll$l$  \n$llllC$lllll$$l$   \n $lll$$BBlll$$$    \n  $llllBlll$$$     \n $llllllllllL$     \n  $$lllll$lll$     \n   $llll$lllL$     \n  $l$llll$lll$     \n  $$$$$lllll$      \n       $$$l$$      \n        $lll$      \n         $$$       \n",
         "2" : '                   \n     $$        $   \n    $/$   $   $l$  \n    $l$  $/$ $lll$ \n   $ll$  $/$$llll$ \n   $ll$ $ll$$lll$  \n  $llll$$ll$$ll$   \n $lllllllll$$l$    \n$Clllllllll$l$     \n$$lllllllll$ll$    \n$llllC$lllll$l$    \n $lll$$BBlll$$$    \n $lllllBlll$L$     \n  $$lllll$lll$     \n   $llll$lllL$     \n  $l$llll$lll$     \n  $$$$$lllll$      \n       $$$l$$      \n        $lll$      \n         $$$       \n',
         "3" : "     $$         $  \n    $/$        $l$ \n    $l$       $lll$\n   $ll$    $$$llll$\n   $ll$  $$//$lll$ \n  $llll$$ll/$lll$  \n $lllllllll$$ll$   \n$Clllllllll$llll$  \n$$lllllllll$ll$l$  \n$llllC$lllll$$l$   \n $lll$$BBlll$$$    \n  $llllBlll$$$     \n $llllllllllL$     \n  $$lllll$lll$     \n   $llll$lllL$     \n  $l$llll$lll$     \n  $$$$$lllll$      \n       $$$l$$      \n        $lll$      \n         $$$       \n",
         "4" : '  $         $$     \n $l$        $/$    \n$lll$       $l$    \n$llll$$$    $ll$   \n $lll$//$$  $ll$   \n  $lll$/ll$$llll$  \n   $ll$$lllllllll$ \n  $llll$lllllllllC$\n  $l$ll$lllllllll$$\n   $l$$lllll$Cllll$\n    $$$lllBB$$lll$ \n     $$$lllBllll$  \n     $Lllllllllll$ \n     $lll$lllll$$  \n     $Llll$llll$   \n     $lll$llll$l$  \n      $lllll$$$$$  \n      $$l$$$       \n      $lll$        \n       $$$         \n',
         "5" : '                   \n   $        $$     \n  $l$   $   $/$    \n $lll$ $/$  $l$    \n $llll$$/$  $ll$   \n  $lll$$ll$ $ll$   \n   $ll$$ll$$llll$  \n    $l$$lllllllll$ \n     $l$lllllllllC$\n    $ll$lllllllll$$\n    $l$lllll$Cllll$\n    $$$lllBB$$lll$ \n     $L$lllBlllll$ \n     $lll$lllll$$  \n     $Llll$llll$   \n     $lll$llll$l$  \n      $lllll$$$$$  \n      $$l$$$       \n      $lll$        \n       $$$         \n',
         "6" : '  $         $$     \n $l$        $/$    \n$lll$       $l$    \n$llll$$$    $ll$   \n $lll$//$$  $ll$   \n  $lll$/ll$$llll$  \n   $ll$$lllllllll$ \n  $llll$lllllllllC$\n  $l$ll$lllllllll$$\n   $l$$lllll$Cllll$\n    $$$lllBB$$lll$ \n     $$$lllBllll$  \n     $Lllllllllll$ \n     $lll$lllll$$  \n     $Llll$llll$   \n     $lll$llll$l$  \n      $lllll$$$$$  \n      $$l$$$       \n      $lll$        \n       $$$         \n',
       }

'''
Pikachu_down
'''
def len_UC(String):
  ESC = Literal('\x1b')
  integer = Word(nums)
  escapeSeq = Combine(ESC + '[' + Optional(delimitedList(integer,';')) +
                  oneOf(list(alphas)))
  nonAnsiString = lambda s : Suppress(escapeSeq).transformString(s)
  unColorString = nonAnsiString(String)
  return(len(unColorString))

def tailN_rm(String):
  String = String+"\n+_____tag"
  return String.replace("\n\n+_____tag",'')

def Comple(TB):
  N_sp = 0
  line_T = len(TB.split("\n"))
  for i in range(line_T):
    if len_UC(TB.split("\n")[i]) > N_sp:
      N_sp = len_UC(TB.split("\n")[i])
  result = ""
  for i in range(line_T):
    result += TB.split("\n")[i]+" "*(N_sp-len_UC(TB.split("\n")[i]))+'\n'
  result += "\n======="
  return result.replace("\n\n=======",'')

def Easy_Com(A_l,A_r,N_blank=2):
  result = ''
  Ll = len(A_l.split('\n'))
  Lr = len(A_r.split('\n'))
  for i in range(Ll):
    if i > (Lr-1):
      AR = len_UC(A_r.split('\n')[0])*"-"
    else:
      AR = A_r.split('\n')[i]
    result += A_l.split('\n')[i] +N_blank*" " +AR + "\n"
  result += "\n======="
  return result.replace("\n\n=======",'')

def figlet(String):
  S =''
  for i in range(len(String)):
    A = ''
    if i >0:
      if String[i-1]+String[i]=='11':
        A = " "
      else:
        A = ""
    S += A + String[i]
  return pyfiglet.figlet_format(S)

def Pikachu(i):
  Type_c = Pikc_base[str(i)]
  Pika_patern = {"  ":" ",
  ' l':'\x1b[33;33;6m\u2584\x1b[0m' , 'l ':'\x1b[33;33;6m\u2580\x1b[0m',
  " $":"\x1b[30;3;6m\u2584\x1b[0m"  , "$ ":"\x1b[30;3;6m\u2580\x1b[0m",
  ' /':'\x1b[30;0;2m\u2584\x1b[0m'  , '/ ':'\x1b[30;0;2m\u2580\x1b[0m',
  'll':'\x1b[33;40;6m\u2588\x1b[0m' ,
  'l$':'\x1b[33;40;6m\u2580\x1b[0m' , '$l':'\x1b[33;40;6m\u2584\x1b[0m',
  'l/':'\x1b[0;43;2m\u2584\x1b[0m'  , '/l':'\x1b[0;43;2m\u2580\x1b[0m',
  'lB':'\x1b[33;41;6m\u2580\x1b[0m' , 'Bl':'\x1b[33;41;6m\u2584\x1b[0m',
  'lC':'\x1b[0;43;6m\u2584\x1b[0m'  , 'Cl':'\x1b[0;43;6m\u2580\x1b[0m',
  'lL':'\x1b[33;100;6m\u2580\x1b[0m', 'Ll':'\x1b[33;100;6m\u2584\x1b[0m',
  "$$":"\x1b[30;3;6m\u2588\x1b[0m"  ,
  "$/":'\x1b[0;40;2m\u2584\x1b[0m'  , "/$":'\x1b[0;40;2m\u2580\x1b[0m',
  '$C':'\x1b[0;40;6m\u2584\x1b[0m'  , "C$":'\x1b[0;40;6m\u2580\x1b[0m',
  '$L':'\x1b[30;100;6m\u2580\x1b[0m', 'L$':'\x1b[30;100;6m\u2584\x1b[0m',
  '//':'\x1b[30;0;2m\u2588\x1b[0m'  ,  'BB':'\x1b[31;3;6m\u2588\x1b[0m'}
  Pika_list = Type_c.split("\n")
  Pika_r1 = []
  for i in range(len(Pika_list)//2):
    Num = i*2
    Line_tmp = []
    for ii in range(len(Pika_list[Num])):
      Line_tmp += [Pika_list[Num][ii] + Pika_list[Num+1][ii]]
    Pika_r1 += [Line_tmp]
  Pikachu = ""
  for i in Pika_r1:
    Line_tmp2=""
    for ii in i:
      Line_tmp2 += Pika_patern[ii]
    Pikachu += Line_tmp2 +'\n'
  return Pikachu

def time_get():
  Time = os.popen("date").read().replace('  ',' ').replace('\n','').split(' ')
  Time_2 = os.popen('TZ=UTC-8 date +"%H:%M"').read().replace('\n','')
  T = Time[3].split(':')
  Now_time = figlet(str(T[0]+" : "+T[1]))
  T_Date = "   "+Time[-1]+" "+Time[1] +" "+Time[2]+" "+Time[0] + "\tChangsha: "+ Time_2
  return Now_time,T_Date

def FtoC(A):
  if len(A.split(" ")) == 1 and "°" in A :
    A = int(str(A).replace("°",'').replace('F',''))
    Result = str(round((A - 32) * 5/9,1))+'°C'
  else:
    Result = ''
    for i in A.split(' '):
      if "°" in i :
        A = int(str(i).replace("°",'').replace('F',''))
        B = str(round((A - 32) * 5/9,1))+'°C'
      else:
        B = i
      Result += B + ' '
    Result += "  "
    Result = Result.replace("   ",'')
  return Result

def weather_get1():
  try:
    url = 'https://weather.com/weather/today/l/32.75,-117.06?par=google'
    html = urlopen(url).read().decode('utf-8')
    soup = BeautifulSoup(html, features='lxml')
    # get result
    Now_Tm = soup.find('div',{'class':'today_nowcard-temp'}).get_text()
    Now_weather = soup.find('div',{'class':'today_nowcard-phrase'}).get_text()
    Now_feels = soup.find('div',{'class':'today_nowcard-feels'}).get_text()
    Now_hilo = soup.find('div',{'class':'today_nowcard-hilo'}).get_text()
    try:
      Now_hilo = Now_hilo.replace("UV",' UV')
    except:
      Now_hilo = Now_hilo
    # table result
    Now_table = soup.find('div',{'class':'today_nowcard-sidecar component panel'}).find_all('tr')
    Now_TB  = ""
    TB_Hall = ""
    TB_Tall = ""
    for i in Now_table:
      TB_Hall += i.find('th').get_text()+"\n"
      TB_H = i.find('th').get_text()
      TB_T = i.get_text().replace(TB_H,"")
      TB_T = FtoC(TB_T)
      TB_Tall += TB_T +'\n'
    TB_Hall = tailN_rm(TB_Hall)
      #TB_H = "\t"+TB_T
    Now_TB = Easy_Com(Comple(TB_Hall), Comple(TB_Tall),4)
    #remove tail
    # result
    Now_result= FtoC(Now_feels)+'\n'+FtoC(Now_hilo).replace(" Index",':')+'\n'+Now_TB
    Now_TM = figlet(FtoC(Now_Tm))
    Now_result = Now_result.replace('\n\n','')
  except:
    Now_TM = pyfiglet.figlet_format(FtoC("XX"))
    Now_result = "Some thing wrong with the weather,\n please check the inter"
  #weather tomorrow
  #TB_result = ''
  #for i in range(7):
    #TB_result += Now_result.split('\n')[i]+'\n'
  return Now_TM, Now_result

def weather_get2():
  try:
    url = 'https://weather.com/weather/5day/l/USCA0604:1:US'
    html = urlopen(url).read().decode('utf-8')
    soup = BeautifulSoup(html, 'lxml')
    A = soup.find_all('tr',{"class":'clickable closed'})[1]
    A_day = "\x1b[30;47;6m"+A.find('td',{'headers':'day'}).get_text().replace('\n',' ')+"\x1b[0m"
    A_dis = A.find('td',{'headers':'description'}).get_text()
    A2 = A.find('td',{'headers':'hi-lo'}).find_all('span')
    A_hi = FtoC(A2[0].get_text())
    A_lo = FtoC(A2[-1].get_text())
    A_pre = A.find('td',{'headers':'precip'}).get_text()
    A_hum = A.find('td',{'headers':'humidity'}).get_text()
    A_result = A_day + "\n" + A_dis + "\n" + A_hi + "/" + A_lo  + "\nPer: " + A_pre + "\nH:" + A_hum
  except:
    A_result = "\n\nCode:404\n\n\n\n"
  return A_result

def weather_get():
  Weath_tommor =  weather_get2()
  Now_TM,Weather_today = weather_get1()
  Weather_TB = Easy_Com(Weather_today,"\n\n"+Weath_tommor,4)
  Weather_TB = Comple(Weather_TB)
  return Now_TM,Weather_TB

def align_lift(STR):
  T_rows, T_columns = os.popen('stty size', 'r').read().split()
  N_lift = int(T_columns) - len(STR)
  return  " "*N_lift + STR

def power_get():
  CMD = "cat /sys/class/power_supply/BAT0/capacity"
  CMD2 = "cat /sys/class/power_supply/BAT0/uevent| grep 'POWER_SUPPLY_STATUS='| sed 's/POWER_SUPPLY_STATUS=//'"
  Now_power_N = os.popen(CMD).read()
  Power_Charge = os.popen(CMD2).read().replace('\n','')
  if Power_Charge !="Discharging":
    P_head = "\u26A1 Battery "
    N_num=11
  else:
    P_head = "Battery "
    N_num=8
  #Now_power_N = "85"
  Clo1 = "30"
  Clo2 = "42"
  if int(Now_power_N) < 90:
    Clo2="33"
  if int(Now_power_N) < 50:
    Clo2="35"
  if int(Now_power_N) < 20:
    Clo2="31"
  if int(Now_power_N) < 10:
    Clo1="43"
  Now_power = Now_power_N+"%"+"\x1b["+str(Clo1)+";"+(Clo2)+";6m"+"\u2633 "*int(int(Now_power_N)/4) +"\x1b[0m"
  Now_power = P_head +Now_power.replace('\n','')
  Now_power =  " "*(int(T_columns) - int(int(Now_power_N)/4)*2-N_num-len(Now_power_N))+ Now_power
  return Now_power
# the rows and the columns of current terminal

def Mem_get():
  Me_used = int(Top_list[3].split(" ")[8])/1024/1024
  try:
      Me_free = int(Top_list[3].split(" ")[5])/1024/1024
  except:
      Me_free = int(Top_list[3].split(" ")[6])/1024/1024
  Me_used_n = str(round(Me_used,2))+"G"
  Me_free_n = str(round(Me_free,2))+"G"
  Me_used_bar = Col_bar2(Me_used,62,6,32,47)
  return Me_used_bar,Me_used_n,Me_free_n

Bar_sub={'0':' ','1':"\u2581",'2':"\u2582",'3':"\u2583",'4':"\u2584",'5':"\u2585",'6':"\u2586",'7':"\u2587",'8':"\u2588"}

def Col_bar(N_1,N_2,Clo,Clo2=44):
  if int(N_1) != int(N_2):
    B_tail = ("\n\x1b["+str(Clo)+";104;6m\u2588\x1b[0m")*int(N_1)
    B_head = " \n"*(int(N_2-N_1))
    #B_head = "\n"+B_head
    #B_head = B_head.replace("\n\n",'')
    B_mid = "\x1b["+str(Clo)+";"+str(Clo2)+";6m"+Bar_sub[str(int(int(str(float(N_1)).split('.')[1][0])/10*8))]+"\x1b[0m"
    Bar = B_head +B_mid +B_tail
  else:
    Bar  = "\u2588"+"\n\u2588"*(N_2-1)
  return Bar

def Col_bar2(N_real,N_max,N_bar=6,Clo_B1=32,Clo_B2=44,Clo_Tr=0.7,Clo_C1=92,Clo_C2=44):
  if int(N_real) >= int(N_max):
    N_real = N_max
  N_rate = round(float(N_real)/float(N_max),2)
  if int(N_real) != int(N_max):
    if int(N_real)/int(N_max) < Clo_Tr:
      Clo_B1=Clo_B1
    else:
      Clo_B1 = Clo_C1
      Clo_B2 = Clo_C2
    # B_head
    if int(N_rate*N_bar) == float(N_rate*N_bar):
      B_head = " \n"*(int((1-N_rate)*(N_bar-1)))
    else:
      B_head = " \n"*(int((1-N_rate)*(N_bar)))
    N_mid = str(round(float(N_rate*N_bar),2)).split(".")[1]
    N_mid = str(int(float("0."+N_mid)*8))
    # B_mid
    B_mid = "\x1b["+str(Clo_B1)+";"+str(Clo_B2)+";6m"+Bar_sub[N_mid]+"\x1b[0m\n"
    #B_head = B_head.replace("\n\n",'')
    #B_tail
    B_tail = ("\x1b["+str(Clo_B1)+";104;6m\u2588\x1b[0m\n")*int(N_rate*N_bar)
    # Bar
    if len(B_tail.split('\n')) > N_bar:
      B_mid = ''
    Bar = B_head +B_mid +B_tail +"\n"
    Bar = Bar.replace('\n\n','')
  else:
    Bar  = "\x1b[91;104;6m\u2588\x1b[0m"+"\n\x1b[91;104;6m\u2588\x1b[0m"*(N_bar-1)
  return Bar
  #for test
  #result =''
  #for i in range(len(Bar.split('\n'))):
  #  result +=Bar.split('\n')[i]+str(i+1)+'\n'
  #return result

def Row_bar2(N_real,N_max,N_bar=6,Clo_B1=32,Clo_B2=44,Clo_Tr=0.7,Clo_C1=92,Clo_C2=44):
  N_rate = round(float(N_real)/float(N_max),2)
  if int(N_real) != int(N_max):
    if int(N_real)/int(N_max) < Clo_Tr:
      Clo_B1=Clo_B1
    else:
      Clo_B1 = Clo_C1
      Clo_B2 = Clo_C2
    B_tail = ("\x1b["+str(Clo_B1)+";104;6m\u2588\x1b[0m")*int(N_rate*N_bar)
    #print(B_tail)
    if int(N_rate*N_bar) == float(N_rate*N_bar):
      B_head = " "*(int((1-N_rate)*(N_bar-1)))
    else:
      B_head = " "*(int((1-N_rate)*(N_bar)))
    N_mid = str(round(float(N_rate*N_bar),2)).split(".")[1]
    N_mid = str(int(float("0."+N_mid)*8))
    #B_head = B_head.replace("\n\n",'')
    B_mid = "\x1b["+str(Clo_B1)+";"+str(Clo_B2)+";6m"+Bar_sub[N_mid]+"\x1b[0m"
    Bar = B_head +B_mid +B_tail
    #Bar = Bar.replace('\n\n','\n')
  else:
    Bar  = "\x1b[91;104;6m\u2588\x1b[0m"+"\x1b[91;104;6m\u2588\x1b[0m"*(N_bar-1)
  return Bar
  #for test
  #result =''
  #for i in range(len(Bar.split('\n'))):
  #  result +=Bar.split('\n')[i]+str(i+1)+'\n'
  #return result

def Cpu_TM():
  CMD = "sensors| grep Package| awk '{print $4}'"
  TM_cpu = os.popen(CMD).read().replace("\n",'')
  TM_n = TM_cpu.replace('+','').replace("°C",'')
  TM_n = float(TM_n)
  TM_cpuBar = Col_bar2(TM_n,100,6,32,44,0.6,31,47)
  return TM_cpu,TM_cpuBar

def Cpu_use():
  for i in Top_list:
    if "Cpu" in i:
      Cpu_u = i.replace("  ",' ')
  Cpu_u = Cpu_u.split(' ')[1]
  Cpu_bar = Col_bar2(float(Cpu_u),100,6,92,43,0.4,31,44)
  return Cpu_u+"%",Cpu_bar

def Net_get():
    CMD1 = "ifconfig | grep  'TX packets'| tail -n 1| awk '{print $5}'"
    CMD2 = "ifconfig | grep  'RX packets'| tail -n 1| awk '{print $5}'"
    Net_up1 = int(os.popen(CMD1).read().replace('\n',''))
    Net_dw1 = int(os.popen(CMD2).read().replace('\n',''))
    time.sleep(0.5)
    Net_up2 = int(os.popen(CMD1).read().replace('\n',''))
    Net_dw2 = int(os.popen(CMD2).read().replace('\n',''))
    Net_up = (Net_up2 - Net_up1)*2/1024
    Net_dw = (Net_dw2 - Net_dw1)*2/1024
    Net_dwn = Net_dw
    U = "/KB"
    if Net_up > 1024:
      Net_up = Net_up/1024
      U = "/M"
    Net_up = str(round(Net_up,2))+U
    U = "/KB"
    if Net_dw > 1024:
      U = "/KB"
      Net_dw = Net_dw/1024
      U = "/M"
    Net_dw = str(round(Net_dw,2))+U
    return Net_up,Net_dw,Net_dwn

def Cpu_top1():
  return Top_list[6]+Top_list[7]



Now_TM,Now_weather = weather_get()

'''
while 1 < 2:
  os.system('clear')
  print(Col_bar(2,3))
  time.sleep(1)


Now_time = time_get()
Now_power = power_get()
Mem = Mem_get()
TM_cpu,TM_cpuBar = Cpu_TM()

os.system("clear")
Line_1 = ""
for i in range(5):
  Line_1 += Now_time.split("\n")[i]+'\t\t'+Now_TM.split('\n')[i] + "\n"

print(Now_power,Line_1,Now_weather,Mem,TM_cpuBar,sep='\n')
'''
###### for  Bar_chart
'''
Bar_Char part 1 start
'''
Number_Bar = 100
for i in range(1,Number_Bar+1):
  globals()['Bar'+str(i)+"_n"]=0
'''
Bar_Char part 1 stop
'''

Num=0
while 1 < 2:
  Net_up,Net_dw,Net_dwn = Net_get()
  '''
  Bar_Char part 2 start
  '''
  #Net_dwn = float(Net_dw.split("/"))
  Bar1_n =Net_dwn
  # find the max
  for i in reversed(range(2,Number_Bar+1)):
    globals()['Bar'+str(i)+"_n"] = globals()['Bar'+str(i-1)+"_n"]
  Bar_list = []
  for i in range(1,Number_Bar+1):
    Bar_list += [globals()['Bar'+str(i)+"_n"]]
  Bar_list.sort()
  Bar_nmax = int(Bar_list[-1]+1)
  #"Bar"+str(i)+" =Col_bar2(Bar"+str(i)+"_n,Bar_nmax,6,32,32)"
  for i in range(1,Number_Bar+1):
    globals()['Bar'+str(i)] = Col_bar2(globals()['Bar'+str(i)+"_n"],Bar_nmax,6,34,34,0.9,31,42)
  Bar_chart = Bar1
  #for  i  in range(len(Bar1.split('\n'))):
  for i in range(2,Number_Bar+1):
    Bar_chart = Easy_Com(Bar_chart,globals()['Bar'+str(i)],0)
  '''
  Bar_Char part 2 stop
  '''
  pipikachu = Pikachu(Num%6+1)
  #pipikachu2 = Pikachu((Num+3)%6+1)
  PIKA  = Easy_Com("\n"*10,pipikachu,4)
  Top_board= os.popen("top -d0.2 -n 2").read()
  Top_list = Top_board.split('\n')
  T_rows, T_columns = os.popen('stty size', 'r').read().split()
  Num +=1
  if Num%30 == 0:
    WeaA,WeaB = weather_get()
    #if len(Now_weather.split('\n')) == 2:
    Now_TM,Now_weather =  WeaA,WeaB  # 30*10/60 = 5min, update the information of weather 5mins per time
  Now_time,Now_Date = time_get()
  Now_power = power_get()
  Mem_bar,Mem_used,Mem_free = Mem_get()
  TM_cpu,TM_cpuBar = Cpu_TM()
  Cpu_u,Cpu_bar = Cpu_use()
  Cpu_top = Cpu_top1()
  # line_1
  Line_1 = ""
  for i in range(5):
    Line_1 += Now_time.split("\n")[i]+'\t\t'+Now_TM.split('\n')[i] + "\n"
  Line_1 = Line_1+Now_Date+"\n" # add full date
  Line_2="\nMem used:  "+Mem_used+"\nMem free:  "+Mem_free+"\nCPU Tem:   "+TM_cpu+'\nCPU use:   '+Cpu_u+"\nNetwork:   "+Net_up#+"\u2758"+Net_dw
  Line_2 = Comple(Line_2)
  #Line_2 to bar
  Bar_all= Easy_Com(Mem_bar,TM_cpuBar,1)
  Bar_all= Easy_Com(Bar_all,Cpu_bar,1)
  Bar_Line1 = Easy_Com(Bar_all,Line_2,4)
  Bar_Line2 = Easy_Com(Bar_Line1,Bar_chart,4)
  Line_3 = " "*33+ str(Net_dw)

  Bar_Line1N  = len_UC(Bar_Line1.split('\n')[0])
  Number_Bar = int(T_columns) - Bar_Line1N -6
  if Number_Bar > 80:
    Number_Bar = 80

  #running
  os.system("clear")
  print(Now_power,Line_1,Now_weather,Bar_Line2,Line_3,PIKA,sep='\n')
  #time.sleep(0.5) # upadate the 10s per time



'''
for i in range(100):
  B = "\x1b["+str(i)+";43;6m"+ "25\n84" +"\x1b[0m"
  print(B,i)

for i in range(450):
  B = "\x1b[33;"+str(i)+";1m"+ "25\n80" +"\x1b[0m" #+"\x1b[30;2;6m\u2588\x1b[0m"
  print(B,i)

for i in range(100):
  B = "\x1b[30;43;1m"+ "25\n84" +"\x1b[0m"
  print(B,i)

'''
